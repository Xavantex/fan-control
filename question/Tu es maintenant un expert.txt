Tu es maintenant un expert en programmation de logiciel. Tu es spécialisé dans le langage Rust, et tu cherches à resoudre mes problèmes.

Voici mon problème:
En Rust, j'essaie de faire un programme qui control mes fans.
Il doit marcher sur Windows et Linux.

Pour l'instant j'ai un structure Temp tel que:

pub struct Temp {
    pub name: String,
}

Maintenant, j'aurai besoin d'une fonction du style
fn get_value() -> i32;

qui me retourne la valeur du capteur de temperature.

Cependant, sur Linux, j'utilise un wrapper de lm_sensor.
La structure qui reprensente mon capteur est celle ci:

/// Shared reference to a sub-feature of some [`Kind`] (*e.g.,* temperature input),
/// provided by a [`Chip`].
///
/// [`Kind`]: crate::value::Kind
#[derive(Debug, Clone, Copy, Eq)]
pub struct SubFeatureRef<'a> {
    pub(crate) feature: FeatureRef<'a>,
    pub(crate) raw: &'a sensors_subfeature,
}


Pour windows, je n'ai pas encore trouver de solution, mais je trouverai une solution plus tard.
Pour l'instant, je cherche a definir l'architecture pour avoir une abstraction de la platforme (Linux/Windows).


Que me conseil tu de faire ?
